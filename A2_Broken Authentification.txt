Interview Notes

Broken Authentification check lists
1. Cookies reuse after users session close
2. Password reset ( login to application with 2 different browsers, in 1 browser do password reset, and check still other session is active in another browser)
3. Login forms vulerability ( try to brute force with sql injection, check page source form, see login & password field)
4. user Logout  ( attacker click on back button click)
5. Password guessing Attack ( using Burp suite), weak passwords
6. Bypass admin authentication (modifying URL like /admin/dashboard.php
7. Bypassing JSON cookies by modifying cookie
8. Login as any user, if URL contains user ID, change ID and refresh pagesee other user profile page appears?

session Management
Administrative portal- modify URL to reach admin page
cookie HTTP only
cookie insecure
session ID in URL
Session ID guessing, weak session ID

  Authentication- process of validating a user
  Authorization -> restricting or proving different level of accessibility on resources/application
  Multifactor Authentification
  False positive



============    13/03/2021  =============
What is Broken Authentication?
	These types of weaknesses can allow an attacker to either capture or bypass the authentication methods that are used by a web application.

	1) Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.
	2) Permits brute force or other automated attacks.
	3) Permits default, weak, or well-known passwords, such as "Password1" or "admin/admin“.
	4) Uses weak or ineffective credential recovery and forgot-password processes, such as "knowledge-based answers", which cannot be made safe.
	5) Uses plain text, encrypted, or weakly hashed passwords (see A3:2017-Sensitive Data Exposure).
	6_ Has missing or ineffective multi-factor authentication.
	7) Exposes Session IDs in the URL (e.g., URL rewriting).
	8) Does not rotate Session IDs after successful login.
	9) Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.

BROKEN AUTHENTICATION EXAMPLES
Example #1: Credential stuffing
The use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.

Example #2: Application session timeouts aren't set properly.
A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.

Example #3: Passwords are not properly hashed and salted
An insider or external attacker gains access to the system’s password database. User passwords are not properly hashed and salted, exposing every user’s password.


	How to prevent Broken Authentication
	------------------------------------
	1) Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.
	2) Do not ship or deploy with any default credentials, particularly for admin users.
	3) Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.
	4) Align password length, complexity and rotation policies with NIST 800-63 B's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence based password policies.
	5) Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes.
	6) Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected.
	7) Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts.








