
Entities-> are features in DTD

Where to look for / How to identify XXE vulnerabilities
1. Application accepts XML directly or XML uploads or insert untrusted data into XML documents which is then parsed by XML processor
2. Look for SOAP based web services
3. XXE attack may leads to DoS attack

XXE attack can by pass authentification & authorization ,Example if an last name field of user profile is replace with value of "c:/windows/win.ini" throught XXE, once user logged in probably he can see reflected data)

How to perform an XXE attaxk
Example if an application forgot password functionality using XML file type, then an attacker intercept the request via Burp suite tool and add below line in request header
<XML version="1.0" url-encoding="utf-0">
<D!OCTYPE attack [
<!ENTITY xxe SYSTEM "file://etc/passwd" ]>
<Forgotpass>&xxe</forgotpass>

CDATA attack:  "character data", whatever specified inside CDATA will not be parsed by xml parser, so attacker can inject malicious java script code

XXE also possible to lead DoS attack: example one ENTITY refers to multiple ENTITIES recursively so it occupies more memory/resources in system
remediation for XXE DoS is limit number of resources

Learn more on parameterized ENTITY


Optical Character Recognition (OCR)
Tesseract is the most accurate OCR
hkhrais@Hkhrais:~$ sudo apt-get install tesseract-ocr
Tesseract is not very flexible about the format of its input images. It will only accept TIFF images

========================= 13-03-2021 ==============================

What are XML External Entities (XXE)?
     “An XML External Entity attack is a type of attack against an application that parses XML input. 
     This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. 
     This attack may lead to the disclosure of 
                                  confidential data, 
                                  denial of service, 
                                  server side request forgery, 
                                  port scanning from the perspective of the machine where the parser is located, and other system impacts.”

Applications and in particular XML-based web services or downstream integrations might be vulnerable to attack if:

      1) The application accepts XML directly or XML uploads, especially from untrusted sources, or inserts untrusted data into XML documents, 
          which is then parsed by an XML processor.
          
      2) Any of the XML processors in the application or SOAP based web services has document type definitions (DTDs) enabled. As the exact mechanism for disabling DTD           processing varies by processor, it is good practice to consult a reference such as the OWASP Cheat Sheet 'XXE Prevention’.
      
      3) If your application uses SAML for identity processing within federated security or single sign on (SSO) purposes. 
          SAML uses XML for identity assertions, and may be vulnerable.
          
      4) If the application uses SOAP prior to version 1.2, it is likely susceptible to XXE attacks if XML entities are being passed to the SOAP framework.
          Being vulnerable to XXE attacks likely means that the application is vulnerable to denial of service attacks including the Billion Laughs attack.

XXE EXAMPLES
Numerous public XXE issues have been discovered, including attacking embedded devices. XXE occurs in a lot of unexpected places, including deeply nested dependencies. The easiest way is to upload a malicious XML file, if accepted:

Example #1: The attacker attempts to extract data from the server
          <?xml version="1.0" encoding="ISO-8859-1"?> <!DOCTYPE foo [
          <!ELEMENT foo ANY >
          <!ENTITY xxe SYSTEM "file:///etc/passwd" >]> <foo>&xxe;</foo>
      
Example #2: An attacker probes the server's private network by changing the above ENTITY line to
          <!ENTITY xxe SYSTEM "https://192.168.1.1/private" >]>
      
Example #3: An attacker attempts a denial-of-service attack by including a potentially endless file
          <!ENTITY xxe SYSTEM "file:///dev/random" >]>
      

How to prevent XML External Entities (XXE)
    1) Developer training is essential to identify and mitigate XXE. Besides that, preventing XXE requires:

    2) Whenever possible, use less complex data formats such as JSON, and avoiding serialization of sensitive data.
    
    3) Patch or upgrade all XML processors and libraries in use by the application or on the underlying operating system. 
       Use dependency checkers. Update SOAP to SOAP 1.2 or higher.
       
    4) Disable XML external entity and DTD processing in all XML parsers in the application, as per the OWASP Cheat Sheet 'XXE Prevention'.
    
    5) Implement positive ("whitelisting") server-side input validation, filtering, or sanitization to prevent hostile data within XML documents, headers, or nodes.
    
    6) Verify that XML or XSL file upload functionality validates incoming XML using XSD validation or similar.
    
    7) SAST tools can help detect XXE in source code, although manual code review is the best alternative in large, complex applications with many integrations.

If these controls are not possible, consider using virtual patching, API security gateways, Web Application Firewalls (WAF), or Interactive Application Security Testing (IAST) tools to detect, monitor, and block XXE attacks.

============================================================================
Security Assertion Markup Language (SAML) is a standard for logging users into applications based on their sessions in another context. This single sign-on (SSO) login standard has significant advantages over logging in using a username/password:

No need to type in credentials

No need to remember and renew passwords

No weak passwords

How SAML Works
------------------------------
SAML SSO works by transferring the user’s identity from one place (the identity provider) to another (the service provider). This is done through an exchange of digitally signed XML documents.

Consider the following scenario: A user is logged into a system that acts as an identity provider. The user wants to log in to a remote application, such as a support or accounting application (the service provider). The following happens:

The user accesses the remote application using a link on an intranet, a bookmark, or similar and the application loads.

The application identifies the user’s origin (by application subdomain, user IP address, or similar) and redirects the user back to the identity provider, asking for authentication. This is the authentication request.

The user either has an existing active browser session with the identity provider or establishes one by logging into the identity provider.

The identity provider builds the authentication response in the form of an XML-document containing the user’s username or email address, signs it using an X.509 certificate, and posts this information to the service provider.

The service provider, which already knows the identity provider and has a certificate fingerprint, retrieves the authentication response and validates it using the certificate fingerprint.

The identity of the user is established and the user is provided with app access.

Reference : https://hdivsecurity.com/owasp-xml-external-entities-xxe 
